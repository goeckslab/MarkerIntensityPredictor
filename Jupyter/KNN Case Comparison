{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "f5b72ea4-046b-457a-a930-7b0161ebf5f7",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "88bbce5c-ff08-4f38-9b33-0c56a445aa21",
   "metadata": {},
   "source": [
    "# KNN Case Comparison\n",
    "Compares the KNN performance using data of all cases\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "219414e1-7832-49a7-8676-c9765e5330f5",
   "metadata": {},
   "outputs": [],
   "source": [
    "improved_features_9_2_1 = pd.read_csv(\"data/9_2_1/distance_based/fe_improved_features.csv\")\n",
    "improved_features_9_2_2 = pd.read_csv(\"data/9_2_2/distance_based/fe_improved_features.csv\")\n",
    "improved_features_9_3_1 = pd.read_csv(\"data/9_3_1/distance_based/fe_improved_features.csv\")\n",
    "improved_features_9_3_2 = pd.read_csv(\"data/9_3_2/distance_based/fe_improved_features.csv\")\n",
    "\n",
    "improved_features_9_2_1 = improved_features_9_2_1[\"Feature\"].to_list()\n",
    "improved_features_9_2_2 = improved_features_9_2_2[\"Feature\"].to_list()\n",
    "improved_features_9_3_1 = improved_features_9_3_1[\"Feature\"].to_list()\n",
    "improved_features_9_3_2 = improved_features_9_3_2[\"Feature\"].to_list()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "f396d1db-3ef2-4515-9b75-a759437f8329",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['pERK',\n",
       " 'Rad51',\n",
       " 'CCND1',\n",
       " 'Vimentin',\n",
       " 'aSMA',\n",
       " 'Ecad',\n",
       " 'ER',\n",
       " 'PR',\n",
       " 'EGFR',\n",
       " 'pRB',\n",
       " 'CD45',\n",
       " 'Ki67',\n",
       " 'CK19',\n",
       " 'p21',\n",
       " 'CK14',\n",
       " 'AR',\n",
       " 'cPARP',\n",
       " 'CK17',\n",
       " 'CK7',\n",
       " 'HER2',\n",
       " 'Area',\n",
       " 'MajorAxisLength',\n",
       " 'MinorAxisLength',\n",
       " 'Solidity',\n",
       " 'Extent',\n",
       " 'Eccentricity']"
      ]
     },
     "execution_count": 136,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_to_impute = pd.read_csv(\"data/9_2_1/distance_based/features_to_impute.csv\")\n",
    "\n",
    "\n",
    "features_to_impute = features_to_impute[\"0\"].to_list()\n",
    "if \"X_centroid\" in features_to_impute:\n",
    "    features_to_impute.remove(\"X_centroid\")\n",
    "\n",
    "if \"Y_centroid\" in features_to_impute:\n",
    "    features_to_impute.remove(\"Y_centroid\")\n",
    "    \n",
    "features_to_impute"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "7af0e5ae-846b-4840-b7b8-5fa6fa30927c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Case</th>\n",
       "      <th>Improvement</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9 2 1</td>\n",
       "      <td>0.576923</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9 2 2</td>\n",
       "      <td>0.653846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9 3 1</td>\n",
       "      <td>0.346154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9 3 2</td>\n",
       "      <td>0.461538</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Case  Improvement\n",
       "0  9 2 1     0.576923\n",
       "1  9 2 2     0.653846\n",
       "2  9 3 1     0.346154\n",
       "3  9 3 2     0.461538"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "improvement_9_2_1 = len(improved_features_9_2_1) / len(features_to_impute)\n",
    "improvement_9_2_2 = len(improved_features_9_2_2) / len(features_to_impute)\n",
    "improvement_9_3_1 = len(improved_features_9_3_1) / len(features_to_impute)\n",
    "improvement_9_3_2 = len(improved_features_9_3_2) / len(features_to_impute)\n",
    "\n",
    "\n",
    "data = [\n",
    "{\n",
    "    \"Case\": \"9 2 1\",\n",
    "    \"Improvement\": improvement_9_2_1\n",
    "},\n",
    "{\n",
    "    \"Case\": \"9 2 2\",\n",
    "    \"Improvement\": improvement_9_2_2\n",
    "},\n",
    "{\n",
    "    \"Case\": \"9 3 1\",\n",
    "    \"Improvement\": improvement_9_3_1\n",
    "},\n",
    "{\n",
    "    \"Case\": \"9 3 2\",\n",
    "    \"Improvement\": improvement_9_3_2\n",
    "},\n",
    "\n",
    "\n",
    "]\n",
    "\n",
    "improvements = pd.DataFrame().from_records(data)\n",
    "\n",
    "improvements\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23a1a327-72ad-4140-acfa-39381b5551b7",
   "metadata": {},
   "source": [
    "# % Improvement of features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "a1a668a5-e7b0-4be4-b31e-6684a1be1a1b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Creating plot\n",
    "fig = plt.figure(figsize =(10, 7))\n",
    "ax = sns.barplot(x=\"Case\", y=\"Improvement\", data=improvements)\n",
    " \n",
    "# show plot\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5f0d7171-cc49-46af-8faf-a59d08c8e48c",
   "metadata": {},
   "source": [
    "# Inspect improved features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "0c3b1db3-f586-41dc-bcde-dfeb127a12e9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>Case</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>pERK</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Rad51</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CCND1</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ER</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PR</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>CD45</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Ki67</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>CK19</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>p21</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>CK14</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>AR</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>cPARP</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>CK17</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>CK7</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>HER2</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>pERK</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Rad51</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CCND1</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>aSMA</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Ecad</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>ER</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>PR</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>CD45</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Ki67</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>CK19</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>p21</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>CK14</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>AR</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>cPARP</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>CK17</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>CK7</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>HER2</td>\n",
       "      <td>9 2 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>pERK</td>\n",
       "      <td>9 3 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CCND1</td>\n",
       "      <td>9 3 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>aSMA</td>\n",
       "      <td>9 3 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PR</td>\n",
       "      <td>9 3 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CD45</td>\n",
       "      <td>9 3 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>CK19</td>\n",
       "      <td>9 3 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>AR</td>\n",
       "      <td>9 3 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>CK17</td>\n",
       "      <td>9 3 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>CK7</td>\n",
       "      <td>9 3 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Rad51</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CCND1</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>aSMA</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>PR</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Ki67</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>CK19</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>p21</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>AR</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>cPARP</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>CK17</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>CK7</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>HER2</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Features   Case\n",
       "0      pERK  9 2 1\n",
       "1     Rad51  9 2 1\n",
       "2     CCND1  9 2 1\n",
       "3        ER  9 2 1\n",
       "4        PR  9 2 1\n",
       "5      CD45  9 2 1\n",
       "6      Ki67  9 2 1\n",
       "7      CK19  9 2 1\n",
       "8       p21  9 2 1\n",
       "9      CK14  9 2 1\n",
       "10       AR  9 2 1\n",
       "11    cPARP  9 2 1\n",
       "12     CK17  9 2 1\n",
       "13      CK7  9 2 1\n",
       "14     HER2  9 2 1\n",
       "0      pERK  9 2 2\n",
       "1     Rad51  9 2 2\n",
       "2     CCND1  9 2 2\n",
       "3      aSMA  9 2 2\n",
       "4      Ecad  9 2 2\n",
       "5        ER  9 2 2\n",
       "6        PR  9 2 2\n",
       "7      CD45  9 2 2\n",
       "8      Ki67  9 2 2\n",
       "9      CK19  9 2 2\n",
       "10      p21  9 2 2\n",
       "11     CK14  9 2 2\n",
       "12       AR  9 2 2\n",
       "13    cPARP  9 2 2\n",
       "14     CK17  9 2 2\n",
       "15      CK7  9 2 2\n",
       "16     HER2  9 2 2\n",
       "0      pERK  9 3 1\n",
       "1     CCND1  9 3 1\n",
       "2      aSMA  9 3 1\n",
       "3        PR  9 3 1\n",
       "4      CD45  9 3 1\n",
       "5      CK19  9 3 1\n",
       "6        AR  9 3 1\n",
       "7      CK17  9 3 1\n",
       "8       CK7  9 3 1\n",
       "0     Rad51  9 3 2\n",
       "1     CCND1  9 3 2\n",
       "2      aSMA  9 3 2\n",
       "3        PR  9 3 2\n",
       "4      Ki67  9 3 2\n",
       "5      CK19  9 3 2\n",
       "6       p21  9 3 2\n",
       "7        AR  9 3 2\n",
       "8     cPARP  9 3 2\n",
       "9      CK17  9 3 2\n",
       "10      CK7  9 3 2\n",
       "11     HER2  9 3 2"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "features_9_2_1 = pd.DataFrame (improved_features_9_2_1, columns = ['Features'])\n",
    "features_9_2_1[\"Case\"] = \"9 2 1\"\n",
    "\n",
    "features_9_2_2 = pd.DataFrame (improved_features_9_2_2, columns = ['Features'])\n",
    "features_9_2_2[\"Case\"] = \"9 2 2\"\n",
    "\n",
    "features_9_3_1 = pd.DataFrame (improved_features_9_3_1, columns = ['Features'])\n",
    "features_9_3_1[\"Case\"] = \"9 3 1\"\n",
    "\n",
    "features_9_3_2 = pd.DataFrame (improved_features_9_3_2, columns = ['Features'])\n",
    "features_9_3_2[\"Case\"] = \"9 3 2\"\n",
    "\n",
    "improved_features = pd.concat([features_9_2_1, features_9_2_2, features_9_3_1, features_9_3_2])\n",
    "improved_features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "e0ccec10-d648-40a5-9695-309e58f592d9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>Count</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>AR</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>CCND1</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>PR</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>CK7</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>CK19</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>CK17</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>pERK</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>aSMA</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>HER2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>cPARP</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>p21</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Rad51</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Ki67</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>CD45</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>CK14</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>ER</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Ecad</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Feature  Count\n",
       "0       AR      4\n",
       "1    CCND1      4\n",
       "2       PR      4\n",
       "3      CK7      4\n",
       "4     CK19      4\n",
       "5     CK17      4\n",
       "6     pERK      3\n",
       "7     aSMA      3\n",
       "8     HER2      3\n",
       "9    cPARP      3\n",
       "10     p21      3\n",
       "11   Rad51      3\n",
       "12    Ki67      3\n",
       "13    CD45      3\n",
       "14    CK14      2\n",
       "15      ER      2\n",
       "16    Ecad      1"
      ]
     },
     "execution_count": 140,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "unique_counts = pd.DataFrame(improved_features[\"Features\"].value_counts()).reset_index()\n",
    "unique_counts.rename(columns={\"index\": \"Feature\", \"Features\": \"Count\"}, inplace=True)\n",
    "unique_counts"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "72d9261d-3195-4fdb-8fc8-2c71d469b145",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "% of unique features improved: 65%\n"
     ]
    }
   ],
   "source": [
    "print(f\"% of unique features improved: {round(len(unique_counts) / len(features_to_impute) * 100)}%\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fbf1bdab-7b37-4b43-a471-1d933dd182c3",
   "metadata": {},
   "source": [
    "## Show occurence of feature improvement"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "ef0997df-8305-446b-845d-765c4cf48ec4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "fig= plt.figure()\n",
    "fig.set_size_inches(15,7)\n",
    "ax = sns.barplot(x=\"Feature\", y=\"Count\", data=unique_counts)\n",
    "\n",
    "for ax in fig.axes:\n",
    "    for tick in ax.get_xticklabels():\n",
    "        tick.set_rotation(45)\n",
    "\n",
    "plt.title(\"Count of biopsies in which feature improved\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bb70f827-e30c-404f-84bd-b72e842711ad",
   "metadata": {},
   "source": [
    "# Check performance increase per feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "1d1755ce-d3f3-4629-bdde-7a896e0e76d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "best_performing_feature_r2_scores_9_2_1 = pd.read_csv(f\"data/9_2_1/distance_based/fe_best_performing_r2_scores.csv\")\n",
    "best_performing_feature_r2_scores_9_2_1[\"Case\"] = \"9 2 1\"\n",
    "best_performing_feature_r2_scores_9_2_2 = pd.read_csv(f\"data/9_2_2/distance_based/fe_best_performing_r2_scores.csv\")\n",
    "best_performing_feature_r2_scores_9_2_2[\"Case\"] = \"9 2 2\"\n",
    "best_performing_feature_r2_scores_9_3_1 = pd.read_csv(f\"data/9_3_1/distance_based/fe_best_performing_r2_scores.csv\")\n",
    "best_performing_feature_r2_scores_9_3_1[\"Case\"] = \"9 3 1\"\n",
    "best_performing_feature_r2_scores_9_3_2 = pd.read_csv(f\"data/9_3_2/distance_based/fe_best_performing_r2_scores.csv\")\n",
    "best_performing_feature_r2_scores_9_3_2[\"Case\"] = \"9 3 2\"\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "9dce050c-72be-4d40-8f90-93ec9fdc6e80",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>Score</th>\n",
       "      <th>Origin</th>\n",
       "      <th>Case</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>pERK</td>\n",
       "      <td>0.357092</td>\n",
       "      <td>spatial 6</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Rad51</td>\n",
       "      <td>0.304333</td>\n",
       "      <td>spatial 6</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CCND1</td>\n",
       "      <td>0.390367</td>\n",
       "      <td>spatial 6</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ER</td>\n",
       "      <td>0.607360</td>\n",
       "      <td>spatial 6</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PR</td>\n",
       "      <td>0.069915</td>\n",
       "      <td>spatial 6</td>\n",
       "      <td>9 2 1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>AR</td>\n",
       "      <td>0.631286</td>\n",
       "      <td>30</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>cPARP</td>\n",
       "      <td>0.672032</td>\n",
       "      <td>30</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>CK17</td>\n",
       "      <td>0.741636</td>\n",
       "      <td>30</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>CK7</td>\n",
       "      <td>0.695882</td>\n",
       "      <td>30</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>HER2</td>\n",
       "      <td>0.731263</td>\n",
       "      <td>30</td>\n",
       "      <td>9 3 2</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>159 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Feature     Score     Origin   Case\n",
       "0     pERK  0.357092  spatial 6  9 2 1\n",
       "1    Rad51  0.304333  spatial 6  9 2 1\n",
       "2    CCND1  0.390367  spatial 6  9 2 1\n",
       "3       ER  0.607360  spatial 6  9 2 1\n",
       "4       PR  0.069915  spatial 6  9 2 1\n",
       "..     ...       ...        ...    ...\n",
       "31      AR  0.631286         30  9 3 2\n",
       "32   cPARP  0.672032         30  9 3 2\n",
       "33    CK17  0.741636         30  9 3 2\n",
       "34     CK7  0.695882         30  9 3 2\n",
       "35    HER2  0.731263         30  9 3 2\n",
       "\n",
       "[159 rows x 4 columns]"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_performing_features = pd.concat([best_performing_feature_r2_scores_9_2_1, best_performing_feature_r2_scores_9_2_2, best_performing_feature_r2_scores_9_3_1, best_performing_feature_r2_scores_9_3_2])\n",
    "best_performing_features\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "2809812d-cb87-48f9-b13f-9bbc5f6d0a05",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Feature</th>\n",
       "      <th>Improvement to Spatial</th>\n",
       "      <th>Improvement to Non Spatial</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>pERK</td>\n",
       "      <td>0.040831</td>\n",
       "      <td>0.091566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Rad51</td>\n",
       "      <td>0.079421</td>\n",
       "      <td>0.019018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>CCND1</td>\n",
       "      <td>0.127899</td>\n",
       "      <td>0.130942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ER</td>\n",
       "      <td>0.091295</td>\n",
       "      <td>0.031066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>PR</td>\n",
       "      <td>0.459109</td>\n",
       "      <td>0.403976</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>CD45</td>\n",
       "      <td>0.125797</td>\n",
       "      <td>0.159942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Ki67</td>\n",
       "      <td>0.067963</td>\n",
       "      <td>0.046625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>CK19</td>\n",
       "      <td>0.128416</td>\n",
       "      <td>0.088035</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>p21</td>\n",
       "      <td>0.095739</td>\n",
       "      <td>0.029221</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>CK14</td>\n",
       "      <td>0.167168</td>\n",
       "      <td>0.069512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>AR</td>\n",
       "      <td>0.111520</td>\n",
       "      <td>0.054984</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>cPARP</td>\n",
       "      <td>0.210752</td>\n",
       "      <td>0.167793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>CK17</td>\n",
       "      <td>0.111128</td>\n",
       "      <td>0.040296</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>CK7</td>\n",
       "      <td>0.418502</td>\n",
       "      <td>0.201122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>HER2</td>\n",
       "      <td>0.102165</td>\n",
       "      <td>0.049651</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>aSMA</td>\n",
       "      <td>0.166340</td>\n",
       "      <td>0.087680</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Ecad</td>\n",
       "      <td>0.023015</td>\n",
       "      <td>0.026801</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Feature  Improvement to Spatial  Improvement to Non Spatial\n",
       "0     pERK                0.040831                    0.091566\n",
       "1    Rad51                0.079421                    0.019018\n",
       "2    CCND1                0.127899                    0.130942\n",
       "3       ER                0.091295                    0.031066\n",
       "4       PR                0.459109                    0.403976\n",
       "5     CD45                0.125797                    0.159942\n",
       "6     Ki67                0.067963                    0.046625\n",
       "7     CK19                0.128416                    0.088035\n",
       "8      p21                0.095739                    0.029221\n",
       "9     CK14                0.167168                    0.069512\n",
       "10      AR                0.111520                    0.054984\n",
       "11   cPARP                0.210752                    0.167793\n",
       "12    CK17                0.111128                    0.040296\n",
       "13     CK7                0.418502                    0.201122\n",
       "14    HER2                0.102165                    0.049651\n",
       "15    aSMA                0.166340                    0.087680\n",
       "16    Ecad                0.023015                    0.026801"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate difference for each feature between the base (feature engineered data ) and the remaining origin\n",
    "data=[]\n",
    "for feature in best_performing_features[\"Feature\"].unique():\n",
    "    scores = best_performing_features[best_performing_features[\"Feature\"] == feature]\n",
    "        \n",
    "        \n",
    "    data.append(\n",
    "        {\n",
    "            \"Feature\": feature,\n",
    "            \"Improvement to Spatial\": scores[scores[\"Origin\"] == \"30\"][\"Score\"].mean() - scores[scores[\"Origin\"] == \"spatial 6\"][\"Score\"].mean(),\n",
    "            \"Improvement to Non Spatial\": scores[scores[\"Origin\"] == \"30\"][\"Score\"].mean() - scores[scores[\"Origin\"] == \"no_spatial 6\"][\"Score\"].mean()\n",
    "        }\n",
    "    )\n",
    "    \n",
    "\n",
    "improvement_difference = pd.DataFrame().from_records(data)\n",
    "improvement_difference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "cf658442-3a3f-43a6-8bd3-030d71fb833f",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert df to use with plot\n",
    "converted_improvement_difference = pd.melt(improvement_difference, id_vars=['Feature'], value_vars=['Improvement to Spatial', \"Improvement to Non Spatial\"],\n",
    "         var_name='Origin', value_name='Improvement')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "425a8e81-a9d2-4d28-887a-c9f440e6c019",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x504 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fig= plt.figure()\n",
    "fig.set_size_inches(15,7)\n",
    "ax = sns.barplot(x=\"Feature\", y=\"Improvement\",hue=\"Origin\", data=converted_improvement_difference)\n",
    "\n",
    "for ax in fig.axes:\n",
    "    for tick in ax.get_xticklabels():\n",
    "        tick.set_rotation(45)\n",
    "        \n",
    "plt.title(\"Improvement of imputation using feature engineered data as base\")\n",
    "plt.ylabel(\"Improvement to different origin\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3cacd075-076a-411c-94b9-af88100c62f1",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
